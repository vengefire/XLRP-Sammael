// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BattleTech_Wepaons_Lab;
//
//    var weapons = Weapons.FromJson(jsonString);

namespace BattleTech_Wepaons_Lab
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Weapons
    {
        [JsonProperty("Category", NullValueHandling = NullValueHandling.Ignore)]
        public string Category { get; set; }

        [JsonProperty("Type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("WeaponSubType", NullValueHandling = NullValueHandling.Ignore)]
        public string WeaponSubType { get; set; }

        [JsonProperty("MinRange", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinRange { get; set; }

        [JsonProperty("MaxRange", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxRange { get; set; }

        [JsonProperty("RangeSplit", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> RangeSplit { get; set; }

        [JsonProperty("ammoCategoryID", NullValueHandling = NullValueHandling.Ignore)]
        public string AmmoCategoryId { get; set; }

        [JsonProperty("StartingAmmoCapacity", NullValueHandling = NullValueHandling.Ignore)]
        public long? StartingAmmoCapacity { get; set; }

        [JsonProperty("HeatGenerated", NullValueHandling = NullValueHandling.Ignore)]
        public long? HeatGenerated { get; set; }

        [JsonProperty("Damage", NullValueHandling = NullValueHandling.Ignore)]
        public long? Damage { get; set; }

        [JsonProperty("OverheatedDamageMultiplier", NullValueHandling = NullValueHandling.Ignore)]
        public long? OverheatedDamageMultiplier { get; set; }

        [JsonProperty("EvasiveDamageMultiplier", NullValueHandling = NullValueHandling.Ignore)]
        public long? EvasiveDamageMultiplier { get; set; }

        [JsonProperty("EvasivePipsIgnored", NullValueHandling = NullValueHandling.Ignore)]
        public long? EvasivePipsIgnored { get; set; }

        [JsonProperty("DamageVariance", NullValueHandling = NullValueHandling.Ignore)]
        public long? DamageVariance { get; set; }

        [JsonProperty("HeatDamage", NullValueHandling = NullValueHandling.Ignore)]
        public long? HeatDamage { get; set; }

        [JsonProperty("AccuracyModifier", NullValueHandling = NullValueHandling.Ignore)]
        public long? AccuracyModifier { get; set; }

        [JsonProperty("CriticalChanceMultiplier", NullValueHandling = NullValueHandling.Ignore)]
        public long? CriticalChanceMultiplier { get; set; }

        [JsonProperty("AOECapable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AoeCapable { get; set; }

        [JsonProperty("IndirectFireCapable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IndirectFireCapable { get; set; }

        [JsonProperty("RefireModifier", NullValueHandling = NullValueHandling.Ignore)]
        public long? RefireModifier { get; set; }

        [JsonProperty("ShotsWhenFired", NullValueHandling = NullValueHandling.Ignore)]
        public long? ShotsWhenFired { get; set; }

        [JsonProperty("ProjectilesPerShot", NullValueHandling = NullValueHandling.Ignore)]
        public long? ProjectilesPerShot { get; set; }

        [JsonProperty("AttackRecoil", NullValueHandling = NullValueHandling.Ignore)]
        public long? AttackRecoil { get; set; }

        [JsonProperty("Instability", NullValueHandling = NullValueHandling.Ignore)]
        public long? Instability { get; set; }

        [JsonProperty("WeaponEffectID", NullValueHandling = NullValueHandling.Ignore)]
        public string WeaponEffectId { get; set; }

        [JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
        public WeaponsDescription Description { get; set; }

        [JsonProperty("BonusValueA", NullValueHandling = NullValueHandling.Ignore)]
        public string BonusValueA { get; set; }

        [JsonProperty("BonusValueB", NullValueHandling = NullValueHandling.Ignore)]
        public string BonusValueB { get; set; }

        [JsonProperty("ComponentType", NullValueHandling = NullValueHandling.Ignore)]
        public string ComponentType { get; set; }

        [JsonProperty("ComponentSubType", NullValueHandling = NullValueHandling.Ignore)]
        public string ComponentSubType { get; set; }

        [JsonProperty("PrefabIdentifier", NullValueHandling = NullValueHandling.Ignore)]
        public string PrefabIdentifier { get; set; }

        [JsonProperty("BattleValue", NullValueHandling = NullValueHandling.Ignore)]
        public long? BattleValue { get; set; }

        [JsonProperty("InventorySize", NullValueHandling = NullValueHandling.Ignore)]
        public long? InventorySize { get; set; }

        [JsonProperty("Tonnage", NullValueHandling = NullValueHandling.Ignore)]
        public long? Tonnage { get; set; }

        [JsonProperty("AllowedLocations", NullValueHandling = NullValueHandling.Ignore)]
        public string AllowedLocations { get; set; }

        [JsonProperty("DisallowedLocations", NullValueHandling = NullValueHandling.Ignore)]
        public string DisallowedLocations { get; set; }

        [JsonProperty("CriticalComponent", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CriticalComponent { get; set; }

        [JsonProperty("statusEffects", NullValueHandling = NullValueHandling.Ignore)]
        public List<StatusEffect> StatusEffects { get; set; }

        [JsonProperty("ComponentTags", NullValueHandling = NullValueHandling.Ignore)]
        public ComponentTags ComponentTags { get; set; }
    }

    public partial class ComponentTags
    {
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Items { get; set; }

        [JsonProperty("tagSetSourceFile", NullValueHandling = NullValueHandling.Ignore)]
        public string TagSetSourceFile { get; set; }
    }

    public partial class WeaponsDescription
    {
        [JsonProperty("Cost", NullValueHandling = NullValueHandling.Ignore)]
        public long? Cost { get; set; }

        [JsonProperty("Rarity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Rarity { get; set; }

        [JsonProperty("Purchasable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Purchasable { get; set; }

        [JsonProperty("Manufacturer", NullValueHandling = NullValueHandling.Ignore)]
        public string Manufacturer { get; set; }

        [JsonProperty("Model", NullValueHandling = NullValueHandling.Ignore)]
        public string Model { get; set; }

        [JsonProperty("UIName", NullValueHandling = NullValueHandling.Ignore)]
        public string UiName { get; set; }

        [JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("Details", NullValueHandling = NullValueHandling.Ignore)]
        public string Details { get; set; }

        [JsonProperty("Icon", NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }
    }

    public partial class StatusEffect
    {
        [JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
        public StatusEffectDescription Description { get; set; }

        [JsonProperty("effectType", NullValueHandling = NullValueHandling.Ignore)]
        public string EffectType { get; set; }

        [JsonProperty("nature", NullValueHandling = NullValueHandling.Ignore)]
        public string Nature { get; set; }

        [JsonProperty("durationData", NullValueHandling = NullValueHandling.Ignore)]
        public DurationData DurationData { get; set; }

        [JsonProperty("targetingData", NullValueHandling = NullValueHandling.Ignore)]
        public TargetingData TargetingData { get; set; }

        [JsonProperty("statisticData", NullValueHandling = NullValueHandling.Ignore)]
        public StatisticData StatisticData { get; set; }
    }

    public partial class StatusEffectDescription
    {
        [JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("Details", NullValueHandling = NullValueHandling.Ignore)]
        public string Details { get; set; }

        [JsonProperty("Icon", NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }
    }

    public partial class DurationData
    {
        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public long? Duration { get; set; }

        [JsonProperty("ticksOnActivations", NullValueHandling = NullValueHandling.Ignore)]
        public bool? TicksOnActivations { get; set; }

        [JsonProperty("useActivationsOfTarget", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseActivationsOfTarget { get; set; }

        [JsonProperty("ticksOnEndOfRound", NullValueHandling = NullValueHandling.Ignore)]
        public bool? TicksOnEndOfRound { get; set; }

        [JsonProperty("ticksOnMovements", NullValueHandling = NullValueHandling.Ignore)]
        public bool? TicksOnMovements { get; set; }

        [JsonProperty("stackLimit", NullValueHandling = NullValueHandling.Ignore)]
        public long? StackLimit { get; set; }

        [JsonProperty("clearedWhenAttacked", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ClearedWhenAttacked { get; set; }
    }

    public partial class StatisticData
    {
        [JsonProperty("statName", NullValueHandling = NullValueHandling.Ignore)]
        public string StatName { get; set; }

        [JsonProperty("operation", NullValueHandling = NullValueHandling.Ignore)]
        public string Operation { get; set; }

        [JsonProperty("modValue", NullValueHandling = NullValueHandling.Ignore)]
        public string ModValue { get; set; }

        [JsonProperty("modType", NullValueHandling = NullValueHandling.Ignore)]
        public string ModType { get; set; }

        [JsonProperty("additionalRules", NullValueHandling = NullValueHandling.Ignore)]
        public string AdditionalRules { get; set; }

        [JsonProperty("targetCollection", NullValueHandling = NullValueHandling.Ignore)]
        public string TargetCollection { get; set; }

        [JsonProperty("targetWeaponCategory", NullValueHandling = NullValueHandling.Ignore)]
        public string TargetWeaponCategory { get; set; }

        [JsonProperty("targetWeaponType", NullValueHandling = NullValueHandling.Ignore)]
        public string TargetWeaponType { get; set; }

        [JsonProperty("targetAmmoCategory", NullValueHandling = NullValueHandling.Ignore)]
        public string TargetAmmoCategory { get; set; }

        [JsonProperty("targetWeaponSubType", NullValueHandling = NullValueHandling.Ignore)]
        public string TargetWeaponSubType { get; set; }

        [JsonProperty("appliesEachTick", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AppliesEachTick { get; set; }
    }

    public partial class TargetingData
    {
        [JsonProperty("effectTriggerType", NullValueHandling = NullValueHandling.Ignore)]
        public string EffectTriggerType { get; set; }

        [JsonProperty("effectTargetType", NullValueHandling = NullValueHandling.Ignore)]
        public string EffectTargetType { get; set; }

        [JsonProperty("triggerLimit", NullValueHandling = NullValueHandling.Ignore)]
        public long? TriggerLimit { get; set; }

        [JsonProperty("showInTargetPreview", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowInTargetPreview { get; set; }

        [JsonProperty("showInStatusPanel", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowInStatusPanel { get; set; }

        [JsonProperty("hideApplicationFloatie", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideApplicationFloatie { get; set; }
    }

    public partial class Weapons
    {
        public static Weapons FromJson(string json) => JsonConvert.DeserializeObject<Weapons>(json, BattleTech_Wepaons_Lab.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Weapons self) => JsonConvert.SerializeObject(self, BattleTech_Wepaons_Lab.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
