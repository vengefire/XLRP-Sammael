// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BattleEngineJsonCreation;
//
//    var jumpjet = Jumpjet.FromJson(jsonString);

namespace BattleEngineJsonCreation
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Jumpjet
    {
        [JsonProperty("JumpCapacity", NullValueHandling = NullValueHandling.Ignore)]
        public long? JumpCapacity { get; set; }

        [JsonProperty("MinTonnage", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinTonnage { get; set; }

        [JsonProperty("MaxTonnage", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxTonnage { get; set; }

        [JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [JsonProperty("BonusValueA", NullValueHandling = NullValueHandling.Ignore)]
        public string BonusValueA { get; set; }

        [JsonProperty("BonusValueB", NullValueHandling = NullValueHandling.Ignore)]
        public string BonusValueB { get; set; }

        [JsonProperty("ComponentType", NullValueHandling = NullValueHandling.Ignore)]
        public string ComponentType { get; set; }

        [JsonProperty("ComponentSubType", NullValueHandling = NullValueHandling.Ignore)]
        public string ComponentSubType { get; set; }

        [JsonProperty("PrefabIdentifier", NullValueHandling = NullValueHandling.Ignore)]
        public string PrefabIdentifier { get; set; }

        [JsonProperty("BattleValue", NullValueHandling = NullValueHandling.Ignore)]
        public long? BattleValue { get; set; }

        [JsonProperty("InventorySize", NullValueHandling = NullValueHandling.Ignore)]
        public long? InventorySize { get; set; }

        [JsonProperty("Tonnage", NullValueHandling = NullValueHandling.Ignore)]
        public long? Tonnage { get; set; }

        [JsonProperty("AllowedLocations", NullValueHandling = NullValueHandling.Ignore)]
        public string AllowedLocations { get; set; }

        [JsonProperty("DisallowedLocations", NullValueHandling = NullValueHandling.Ignore)]
        public string DisallowedLocations { get; set; }

        [JsonProperty("CriticalComponent", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CriticalComponent { get; set; }
    }

    public partial class Jumpjet
    {
        public static Jumpjet FromJson(string json) => JsonConvert.DeserializeObject<Jumpjet>(json, Converter.Settings);
    }
}
