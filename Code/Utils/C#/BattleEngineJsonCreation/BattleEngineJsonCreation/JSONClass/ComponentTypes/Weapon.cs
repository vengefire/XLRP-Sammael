// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BattleEngineJsonCreation;
//
//    var weapon = Weapon.FromJson(jsonString);

namespace BattleEngineJsonCreation
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Weapon
    {
        [JsonProperty("Category", NullValueHandling = NullValueHandling.Ignore)]
        public string Category { get; set; }

        [JsonProperty("Type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("MinRange", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinRange { get; set; }

        [JsonProperty("MaxRange", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxRange { get; set; }

        [JsonProperty("RangeSplit")]
        public List<long> RangeSplit { get; set; }

        [JsonProperty("ammoCategoryID", NullValueHandling = NullValueHandling.Ignore)]
        public string AmmoCategoryId { get; set; }

        [JsonProperty("StartingAmmoCapacity", NullValueHandling = NullValueHandling.Ignore)]
        public long? StartingAmmoCapacity { get; set; }

        [JsonProperty("HeatGenerated", NullValueHandling = NullValueHandling.Ignore)]
        public long? HeatGenerated { get; set; }

        [JsonProperty("Damage", NullValueHandling = NullValueHandling.Ignore)]
        public long? Damage { get; set; }

        [JsonProperty("DamageVariance", NullValueHandling = NullValueHandling.Ignore)]
        public long? DamageVariance { get; set; }

        [JsonProperty("HeatDamage", NullValueHandling = NullValueHandling.Ignore)]
        public long? HeatDamage { get; set; }

        [JsonProperty("AccuracyModifier", NullValueHandling = NullValueHandling.Ignore)]
        public long? AccuracyModifier { get; set; }

        [JsonProperty("CriticalChanceMultiplier", NullValueHandling = NullValueHandling.Ignore)]
        public long? CriticalChanceMultiplier { get; set; }

        [JsonProperty("AOECapable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AoeCapable { get; set; }

        [JsonProperty("IndirectFireCapable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IndirectFireCapable { get; set; }

        [JsonProperty("RefireModifier", NullValueHandling = NullValueHandling.Ignore)]
        public long? RefireModifier { get; set; }

        [JsonProperty("ShotsWhenFired", NullValueHandling = NullValueHandling.Ignore)]
        public long? ShotsWhenFired { get; set; }

        [JsonProperty("ProjectilesPerShot", NullValueHandling = NullValueHandling.Ignore)]
        public long? ProjectilesPerShot { get; set; }

        [JsonProperty("AttackRecoil", NullValueHandling = NullValueHandling.Ignore)]
        public long? AttackRecoil { get; set; }

        [JsonProperty("Instability", NullValueHandling = NullValueHandling.Ignore)]
        public long? Instability { get; set; }

        [JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [JsonProperty("BonusValueA", NullValueHandling = NullValueHandling.Ignore)]
        public string BonusValueA { get; set; }

        [JsonProperty("BonusValueB", NullValueHandling = NullValueHandling.Ignore)]
        public string BonusValueB { get; set; }

        [JsonProperty("ComponentType", NullValueHandling = NullValueHandling.Ignore)]
        public string ComponentType { get; set; }

        [JsonProperty("ComponentSubType", NullValueHandling = NullValueHandling.Ignore)]
        public string ComponentSubType { get; set; }

        [JsonProperty("WeaponEffectID", NullValueHandling = NullValueHandling.Ignore)]
        public string WeaponEffectId { get; set; }

        [JsonProperty("PrefabIdentifier", NullValueHandling = NullValueHandling.Ignore)]
        public string PrefabIdentifier { get; set; }

        [JsonProperty("BattleValue", NullValueHandling = NullValueHandling.Ignore)]
        public long? BattleValue { get; set; }

        [JsonProperty("InventorySize", NullValueHandling = NullValueHandling.Ignore)]
        public long? InventorySize { get; set; }

        [JsonProperty("Tonnage", NullValueHandling = NullValueHandling.Ignore)]
        public long? Tonnage { get; set; }

        [JsonProperty("AllowedLocations", NullValueHandling = NullValueHandling.Ignore)]
        public string AllowedLocations { get; set; }

        [JsonProperty("DisallowedLocations", NullValueHandling = NullValueHandling.Ignore)]
        public string DisallowedLocations { get; set; }

        [JsonProperty("CriticalComponent", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CriticalComponent { get; set; }

        [JsonProperty("WeaponSubType", NullValueHandling = NullValueHandling.Ignore)]
        public string WeaponSubType { get; set; }

        [JsonProperty("OverheatedDamageMultiplier", NullValueHandling = NullValueHandling.Ignore)]
        public long? OverheatedDamageMultiplier { get; set; }

        [JsonProperty("EvasiveDamageMultiplier", NullValueHandling = NullValueHandling.Ignore)]
        public long? EvasiveDamageMultiplier { get; set; }

        [JsonProperty("EvasivePipsIgnored", NullValueHandling = NullValueHandling.Ignore)]
        public long? EvasivePipsIgnored { get; set; }

        [JsonProperty("statusEffects", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> StatusEffects { get; set; }

        [JsonProperty("ComponentTags", NullValueHandling = NullValueHandling.Ignore)]
        public ComponentTags ComponentTags { get; set; }
    }

    public partial class Weapon
    {
        public static Weapon FromJson(string json) => JsonConvert.DeserializeObject<Weapon>(json, Converter.Settings);
    }
}
