// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BattleEngineJsonCreation;
//
//    var ammunitionBox = AmmunitionBox.FromJson(jsonString);

namespace BattleEngineJsonCreation
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AmmunitionBox
    {
        [JsonProperty("AmmoID", NullValueHandling = NullValueHandling.Ignore)]
        public string AmmoId { get; set; }

        [JsonProperty("Capacity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Capacity { get; set; }

        [JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [JsonProperty("BonusValueA", NullValueHandling = NullValueHandling.Ignore)]
        public string BonusValueA { get; set; }

        [JsonProperty("BonusValueB", NullValueHandling = NullValueHandling.Ignore)]
        public string BonusValueB { get; set; }

        [JsonProperty("ComponentType", NullValueHandling = NullValueHandling.Ignore)]
        public string ComponentType { get; set; }

        [JsonProperty("ComponentSubType", NullValueHandling = NullValueHandling.Ignore)]
        public string ComponentSubType { get; set; }

        [JsonProperty("PrefabIdentifier", NullValueHandling = NullValueHandling.Ignore)]
        public string PrefabIdentifier { get; set; }

        [JsonProperty("BattleValue", NullValueHandling = NullValueHandling.Ignore)]
        public long? BattleValue { get; set; }

        [JsonProperty("InventorySize", NullValueHandling = NullValueHandling.Ignore)]
        public long? InventorySize { get; set; }

        [JsonProperty("Tonnage", NullValueHandling = NullValueHandling.Ignore)]
        public double? Tonnage { get; set; }

        [JsonProperty("CanExplode", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CanExplode { get; set; }

        [JsonProperty("AllowedLocations", NullValueHandling = NullValueHandling.Ignore)]
        public string AllowedLocations { get; set; }

        [JsonProperty("DisallowedLocations", NullValueHandling = NullValueHandling.Ignore)]
        public string DisallowedLocations { get; set; }

        [JsonProperty("CriticalComponent", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CriticalComponent { get; set; }

        [JsonProperty("statusEffects", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> StatusEffects { get; set; }

        [JsonProperty("ComponentTags", NullValueHandling = NullValueHandling.Ignore)]
        public ComponentTags ComponentTags { get; set; }

        [JsonProperty("Custom", NullValueHandling = NullValueHandling.Ignore)]
        public Custom Custom { get; set; }
    }

    public partial class ComponentTags
    {
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Items { get; set; }

        [JsonProperty("tagSetSourceFile", NullValueHandling = NullValueHandling.Ignore)]
        public string TagSetSourceFile { get; set; }
    }

    public partial class Custom
    {
        [JsonProperty("ComponentExplosion", NullValueHandling = NullValueHandling.Ignore)]
        public ComponentExplosion ComponentExplosion { get; set; }

        [JsonProperty("Category", NullValueHandling = NullValueHandling.Ignore)]
        public List<Category> Category { get; set; }

        [JsonProperty("Flags", NullValueHandling = NullValueHandling.Ignore)]
        public Flags Flags { get; set; }

        [JsonProperty("BonusDescriptions", NullValueHandling = NullValueHandling.Ignore)]
        public BonusDescriptions BonusDescriptions { get; set; }

        [JsonProperty("InventorySorter", NullValueHandling = NullValueHandling.Ignore)]
        public InventorySorter InventorySorter { get; set; }
    }

    public partial class BonusDescriptions
    {
        [JsonProperty("Bonuses", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Bonuses { get; set; }
    }

    public partial class Category
    {
        [JsonProperty("CategoryID", NullValueHandling = NullValueHandling.Ignore)]
        public string CategoryId { get; set; }
    }

    public partial class ComponentExplosion
    {
        [JsonProperty("ExplosionDamagePerAmmo", NullValueHandling = NullValueHandling.Ignore)]
        public long? ExplosionDamagePerAmmo { get; set; }

        [JsonProperty("StabilityDamagePerAmmo", NullValueHandling = NullValueHandling.Ignore)]
        public long? StabilityDamagePerAmmo { get; set; }
    }

    public partial class Flags
    {
        [JsonProperty("flags", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FlagsFlags { get; set; }
    }

    public partial class InventorySorter
    {
        [JsonProperty("SortKey", NullValueHandling = NullValueHandling.Ignore)]
        public string SortKey { get; set; }
    }

    public partial class Description
    {
        [JsonProperty("Cost", NullValueHandling = NullValueHandling.Ignore)]
        public long? Cost { get; set; }

        [JsonProperty("Rarity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Rarity { get; set; }

        [JsonProperty("Purchasable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Purchasable { get; set; }

        [JsonProperty("Manufacturer", NullValueHandling = NullValueHandling.Ignore)]
        public string Manufacturer { get; set; }

        [JsonProperty("Model", NullValueHandling = NullValueHandling.Ignore)]
        public string Model { get; set; }

        [JsonProperty("UIName", NullValueHandling = NullValueHandling.Ignore)]
        public string UiName { get; set; }

        [JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("Details", NullValueHandling = NullValueHandling.Ignore)]
        public string Details { get; set; }

        [JsonProperty("Icon", NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }
    }

    public partial class AmmunitionBox
    {
        public static AmmunitionBox FromJson(string json) => JsonConvert.DeserializeObject<AmmunitionBox>(json, Converter.Settings);
    }
}
